generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model choices {
  id           Int                       @id @default(autoincrement())
  room_id      Int
  user_name    String
  album_id     String
  album_image  String
  album_artist String
  album_name   String
  eliminated   Boolean
  created_at   DateTime?
  updated_at   DateTime?
  rooms        rooms                     @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model failed_jobs {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique(map: "failed_jobs_uuid_unique")
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now())
}

model migrations {
  id        Int    @id @default(autoincrement())
  migration String
  batch     Int
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model password_resets {
  email      String
  token      String
  created_at DateTime?

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model personal_access_tokens {
  id             Int       @id @default(autoincrement())
  tokenable_type String
  tokenable_id   Int
  name           String
  token          String    @unique(map: "personal_access_tokens_token_unique")
  abilities      String?
  last_used_at   DateTime?
  created_at     DateTime?
  updated_at     DateTime?

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model rooms {
  id         Int       @id @default(autoincrement())
  link_id    String    @unique(map: "rooms_link_id_unique")
  name       String
  created_at DateTime?
  updated_at DateTime?
  step       Int       @default(0)
  choices    choices[]
}

model users {
  id                Int       @id @default(autoincrement())
  name              String
  email             String    @unique(map: "users_email_unique")
  email_verified_at DateTime?
  password          String
  remember_token    String?
  created_at        DateTime?
  updated_at        DateTime?
}
